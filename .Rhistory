library(mlbench)
install.packages('mlbench')
library(mlbench)
data(Glass)
View(Glass)
plot(Glass$RI)
freq(Glass)
library(funModeling)
freq(Glass)
freq(Glass)
profiling_num(Glass)
Glass %>%
select(RI) %>%
ggplot(aes(x=RI)) +
geom_histogram(binwidth = 3) +
theme_minimal()
library(tidyverse)
Glass %>%
select(RI) %>%
ggplot(aes(x=RI)) +
geom_histogram(binwidth = 3) +
theme_minimal()
Glass %>%
select(Na) %>%
ggplot(aes(x=Na)) +
geom_histogram(binwidth = 3) +
theme_minimal()
Glass %>%
select(RI) %>%
ggplot(aes(x=RI)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Na) %>%
ggplot(aes(x=Na)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Mg) %>%
ggplot(aes(x=Mg)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Al) %>%
ggplot(aes(x=Al)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Si) %>%
ggplot(aes(x=Si)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(K) %>%
ggplot(aes(x=K)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Ca) %>%
ggplot(aes(x=Ca)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Ba) %>%
ggplot(aes(x=Ba)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Fe) %>%
ggplot(aes(x=Fe)) +
geom_histogram() +
theme_minimal()
profiling_num(Glass)
Glass %>%
select(RI) %>%
ggplot(aes(x=RI)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Na) %>%
ggplot(aes(x=Na)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Mg) %>%
ggplot(aes(x=Mg)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Al) %>%
ggplot(aes(x=Al)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Si) %>%
ggplot(aes(x=Si)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(K) %>%
ggplot(aes(x=K)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Ca) %>%
ggplot(aes(x=Ca)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Ba) %>%
ggplot(aes(x=Ba)) +
geom_histogram() +
theme_minimal()
Glass %>%
select(Fe) %>%
ggplot(aes(x=Fe)) +
geom_histogram() +
theme_minimal()
correlation_table(data = Glass, target = "type")
correlation_table(data = Glass)
library(corrplot)
corrr <- cor(Glass)
View(Glass)
Glass2 <- Glass %>% mutate(type = as.numeric(type))
Glass2 <- Glass %>% mutate(type = as.numeric(Type))
corrr <- cor(Glass)
corrr <- cor(Glass2)
correlation_table(data=Glass2, target="Type")
Glass2 <- Glass %>% mutate(Type = as.numeric(Type))
correlation_table(data=Glass2, target="Type")
corrrr <- cor(Glass2)
corrplot(corrrr, type="upper", order="hclust")
data(Soybean)
freq(Soybean)
df_status(Soybean)
library(caret)
data(BloodBrain)
df_status(bbbDescr)
corrrr2 <- cor(bbbDescr)
corrplot(corrrr2, type="upper", order="hclust")
(0.545 - 0.1) / 0.1
.545 - .1
.445/.1
.545 - 10
-9.455 / 10
data(oil)
set.seed(100)
sample(oil, 60, replace = FALSE)
data(oil)
str(oilType)
sample(oilType, 60, replace = FALSE)
sample(oilType, 60, replace = TRUE)
table(oilType)
table(sample(oilType, 60, replace = FALSE))
table(sample(oilType, 60, replace = TRUE))
createDataPartition(oilType, p = .60, list= FALSE)
table(createDataPartition(oilType, p = .60, list= FALSE))
createDataPartition(oilType, p = .60, list= FALSE)
createDataPartition(oilType, p = .60, list= TRUE)
oil_training <- createDataPartition(oilType, p = .60, list= TRUE)
str(oil_training)
binom.test(10, 20)
binom.test(10, 20)
binom.test(18, 20)
binom.test(29, 70)
install.packages("AppliedPredictiveModeling")
library(caret)
library(caret)
data(tecator)
library(pls)
pca.fit <- prcomp(absorp, center = TRUE,scale = TRUE)
s <- summary(pca.fit)
plot(1:100, s$importance[3,], type = "b")
s
plot(1:100, s$importance[3,], type = "b")
plot(1:10, s$importance[3,], type = "b")
plot(1:100, s$importance[3,], type = "b")
s
model_data <- data.frame(absorp,endpoints[,2])
colnames(model_data) <- c(names(model_data[,1:100]), "Y")
data_split <- createDataPartition(y = model_data$Y, p = 0.7,
list = FALSE)
data.train <- data[data_split, ]
data_split <- createDataPartition(y = model_data$Y, p = 0.7,
list = FALSE)
data.train <- data[data_split, ]
data.train <- data[data_split,]
data_split
data <- data.frame(absorp,endpoints[,2])
colnames(data) <- c(names(data[,1:100]), "Y")
set.seed(5647)
iTrain <- createDataPartition(y = data$Y, p = 0.75,
list = FALSE)
Train <- data[iTrain, ]
Test <- data[-iTrain, ]
data.train <- model_data[data_split,]
data.test <- model_data[-data_split,]
set.seed(123)
ctrl <- trainControl(method = "cv", number = 10) #set for 10 fold cross validation
lm.fit <- train(Y ~.,
data = data.train,
method = "lm",
trControl = ctrl,
preProc = c("center", "scale"),
tuneLength = 20)
pls.fit <- train(Y ~.,
data = data.train,
method = "pls",
trControl = ctrl,
preProc = c("center", "scale"),
tuneLength = 20)
ridge.fit <- train(Y ~.,
data = data.train,
method = "ridge",
trControl = ctrl,
preProc = c("center", "scale"),
tuneLength = 20)
ridge.fit <- train(Y ~.,
data = data.train,
method = "ridge",
trControl = ctrl,
preProc = c("center", "scale"),
tuneLength = 20)
lasso.fit <- train(Y ~.,
data = data.train,
method = "lasso",
trControl = ctrl,
preProc = c("center", "scale"),
tuneLength = 20)
enet.fit <- train(Y ~.,
data = data.train,
method = "enet",
trControl = ctrl,
preProc = c("center", "scale"),
tuneLength = 20)
suppressMessages(library(gridExtra))
g1 <- ggplot(lm.fit)
g2 <- ggplot(pls.fit)
g3 <- ggplot(ridge.fit)
g4 <- ggplot(lasso.fit)
g5 <- ggplot(enet.fit)
suppressMessages(grid.arrange(g1, g2, g3, g4, g5, ncol = 5))
g1 <- ggplot(lm.fit)
suppressMessages(grid.arrange(g2, g3, g4, g5, ncol = 5))
pred.lm <- predict(lm.fit, data.test)
pred.pls <- predict(pls.fit, data.test)
pred.ridge <- predict(ridge.fit, data.test)
pred.lasso <- predict(lasso.fit, data.test)
pred.enet <- predict(enet.fit, data.test)
Lm.RMSE <- RMSE(pred.lm, data.test$Y)
PLS.RMSE <- RMSE(pred.pls, data.test$Y)
Ridge.RMSE <- RMSE(pred.ridge, Test$Y)
Lasso.RMSE <- RMSE(pred.lasso, Test$Y)
Enet.RMSE <- RMSE(pred.enet, Test$Y)
Ridge.RMSE <- RMSE(pred.ridge, data.test$Y)
Lasso.RMSE <- RMSE(pred.lasso, data.test$Y)
Enet.RMSE <- RMSE(pred.enet, data.test$Y)
c <- cbind(Lm.RMSE, PLS.RMSE,
Ridge.RMSE, Lasso.RMSE, Enet.RMSE); rownames(c) <- "RMSE"
kable(round(c,digits = 3))
knitr::kable(round(values, digits = 3))
values <- cbind(Lm.RMSE, PLS.RMSE,
Ridge.RMSE, Lasso.RMSE, Enet.RMSE); rownames(c) <- "RMSE"
knitr::kable(round(values, digits = 3))
